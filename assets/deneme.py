# -*- coding: utf-8 -*-
"""deneme.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/120DNMFOtWPLxRrT0KjlFknDx12L7VHEb
"""

def boundary_box(filename, detected_faces):
    # load the image
    data = pyplot.imread(filename)
    # plot the image
    pyplot.imshow(data)
    # get the context for drawing boxes
    ax = pyplot.gca()
    # plot each box
    for face in detected_faces:
        # get coordinates
        x, y, width, height = face['box']
        # create the shape
        rect = Rectangle((x, y), width, height, fill=False, color='red')
        # draw the box
        ax.add_patch(rect)
    # show the plot
    pyplot.show()

#pip install cvlib
#pip install python-dotenv
#pip install mtcnn
#pip install mxnet

import cv2
from matplotlib import pyplot
from matplotlib.patches import Rectangle
from mtcnn.mtcnn import MTCNN
from pathlib import Path
import logging
from dotenv import load_dotenv
import cv2
import sys
import glob
import logging
from PIL import Image, ImageFilter
import argparse
import numpy as np
import mxnet as mx
import pandas as pd
from pathlib import Path
import matplotlib.pyplot as plt
import tensorflow as tf
from matplotlib import pyplot
from mtcnn.mtcnn import MTCNN
from PIL import Image
import pandas as pd
import os
from keras.layers import Input, Conv2D, Flatten, Dense, Conv2DTranspose, Concatenate, Reshape, Lambda, Activation, BatchNormalization, LeakyReLU, Dropout,  GlobalAveragePooling2D, RepeatVector
from keras.models import Model, Sequential
from keras import backend as K
from keras.models import load_model
import os
import cv2
import argparse
import dlib
import numpy as np
import scipy.spatial as spatial
import logging
from keras.utils.vis_utils import plot_model

def face_detection_ex(filename):
  # load image from file
  pixels = pyplot.imread(filename)

  # create the detector, using default weights
  detector = MTCNN()
  # detect faces in the image
  faces = detector.detect_faces(pixels) 
  #faces contain for each face index:
  #box: the x, y, width, height of each detected face
  #confidence, key_points 

  # display faces on the original image
  boundary_box(filename, faces)

  return faces

face_detection_ex(picture1)